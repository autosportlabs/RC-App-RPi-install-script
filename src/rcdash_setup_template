#!/bin/bash

RPI_MODEL=$(tr -d '\0' </proc/device-tree/model)
SETTINGS_FILE="/home/$SUDO_USER/.config/racecapture/install_settings.cfg"
FIRST_RUN=1
FULL_INSTALL=1
REBOOT_NEEDED=0
if [[ -d "/boot/firmwware" ]]; then
	BOOT_BASE="/boot/firmware"
else
	BOOT_BASE="/boot"
fi
CONFIG_TXT="$BOOT_BASE/config.txt"
CMDLINE_TXT="$BOOT_BASE/cmdline.txt"
#OFFICIAL_DISPLAY=`lsmod | grep -q edt_ft5x06 && echo 1 || echo 0`

function eval_setting() {
	if [ "$1" == "$2" ]; then
		echo "ON"
	else
		echo "OFF"
	fi
}

function yesno() {
	whiptail --title "$1" --yesno "$2" 20 70 4 3>&1 1>&2 2>&3
	exitstatus=$?
	# Invert truthines
	if [ $exitstatus = 0 ]; then
		echo 1
	else
		echo 0
	fi
}

function password_prompt() {
	PASSWORD=$(whiptail --title "$1" --passwordbox "$2" 20 70 3>&1 1>&2 2>&3)
	exitstatus=$?
	if [ $exitstatus != 0 ]; then
		echo "Password cahcelled, default to no password"
		PASSWORD=""
	fi
	echo $PASSWORD
}

function load_settings() {
	if [ -f "$SETTINGS_FILE" ]; then
		FIRST_RUN=0
		source $SETTINGS_FILE
	else
		eval "__DEFAULT_SETTINGS__"
	fi
}

function dump_settings() {
	cat > "$SETTINGS_FILE" <<-EOF
	__SETTINGS_FILE__
	EOF
	chown $USER:$USER "$SETTINGS_FILE"
}

function setup_rpi_image_config() {
	# Disable console blanking
	if ! grep -q "logo\.nologo" $CMDLINE_TXT; then
       		sed -i '1 s/$/ logo.nologo/' $CMDLINE_TXT
	fi
	if ! grep -q "consoleblank=0" $CMDLINE_TXT; then
       		sed -i '1 s/$/ consoleblank=0/' $CMDLINE_TXT
	fi

	# Disable splash screen
	if ! grep -q "^disable_splash" $CONFIG_TXT; then
       		echo "disable_splash=1" >> $CONFIG_TXT
	fi

	# Set appropriate gpu memory
	if ! grep -q "^gpu_mem=256" $CONFIG_TXT; then
		if grep -q "^gpu_mem=" $CONFIG_TXT; then
			sed -i '$s/^gpu_mem=.*/gpu_mem=256/' $CONFIG_TXT
		else
			echo "gpu_mem=256" >> $CONFIG_TXT
		fi
		REBOOT_NEEDED=1
	fi
}

function setup_packages() {
	# Install the necessary dependencies for the RC App
	echo "Installing necessary packages"
	BASE_PACKAGES="mesa-utils libgles2 libegl1-mesa libegl-mesa0 mtdev-tools pmount pv python3-gpiozero jq"
	X11_PACKAGES="xserver-xorg xserver-xorg-legacy xinit gldriver-test"
	VNC_PACKAGES="x11vnc"

	PACKAGES_TO_INSTALL="${BASE_PACKAGES}"
	if [[ $MODE == "X11" ]]; then
		PACKAGES_TO_INSTALL+=" ${X11_PACKAGES}"
		if [[ $ENABLE_VNC == "1" ]]; then
			PACKAGES_TO_INSTALL+=" ${VNC_PACKAGES}"
		fi
	fi
	apt-get -y install $PACKAGES_TO_INSTALL
}

function add_group() {
	groupname="$1"
	if ! groups "$USER" | grep -qw "$groupname"; then
		adduser $USER $groupname
	fi
}

function setup_user() {
	# Groups needed for the dietpi user to access opengl, input (touch/mouse) and usb serial ports
	echo "Adding user to necessary groups"
	add_group "render"
	add_group "video"
	add_group "input"
	add_group "dialout"
	
	# No .config directory can cause RC App to fail
	mkdir -p /home/$USER/.config/racecapture
	chown $USER:$USER /home/$USER/.config/racecapture
	# Create id_rsa if necessary
	if ! [ -f /home/$USER/.ssh/id_rsa ]; then
		su -c 'ssh-keygen -b 2048 -t rsa -f /home/$USER/.ssh/id_rsa -q -N ""' - $USER
	fi

}

function install_rc_app() {
	# Download and install the RC App
	RC_APP_URL=`curl -s 'https://podium.live/api/v1/applications/1/latest.json?expand=1&platform=rpi' | jq -r .release.url`
	RC_APP_FILENAME=`basename "$RC_APP_URL" | sed 's/\?.*//'`
	echo "Installing RC App '$RC_APP_FILENAME'"
	cd /opt
	if [ -f "$RC_APP_FILENAME" ]; then
	       	echo "RC App '$RC_APP_FILENAME' already downloaded"
	else
	       	echo "Downloading..."
	       	wget -q --progress=bar --show-progress "$RC_APP_URL" -O "$RC_APP_FILENAME"
	fi

	if [ -d "racecapture" ]; then
	       	if (whiptail --title "Overwrite Installation" --yesno "Overwrite the existing racecapture installation." 20 70 4); then
		       	echo "Removing old installation"
		       	rm -rf racecapture
		       	echo "Extracting '$RC_APP_FILENAME'"
		       	pv "$RC_APP_FILENAME" | tar xj
	       	else
		       	echo "Skipping"
	       	fi
	else
	       	echo "Extracting '$RC_APP_FILENAME'"
	       	pv "$RC_APP_FILENAME" | tar xj
	fi
}


if [ -z "$SUDO_USER" ]
then
	echo "Must be run via sudo"
	exit
fi

USER=$SUDO_USER

load_settings

if [ "$FIRST_RUN" = "0" ]; then
	if (whiptail --title "Update Only?" --yesno "Would you like to perform a full reinstall or only upgrade the RC App?" --yes-button "Upgrade Only" --no-button "Reinstall/Reconfig" 20 70 4); then
		FULL_INSTALL=0
	fi
fi

if [ "$FULL_INSTALL" = "1" ]; then
	setup_rpi_image_config


	IS_AUTOLOGIN=$(/usr/bin/raspi-config nonint get_autologin)
	if [[ $IS_AUTOLOGIN == "1" ]]; then
		ENABLE_AUTOLOGIN=$(yesno "Auto Login" "Enable automatic login on startup?")
		if [[ $ENABLE_AUTOLOGIN == "1" ]]; then
			/usr/bin/raspi-config nonint do_boot_behaviour B2
		fi
	fi

	if (whiptail --title "RPi Official Display" --yesno "Enable RPi Official touchscreen support?\n\nNote: only select yes if using an RPi Official Display connected directly to your RPi!" 20 70 4); then
		OFFICIAL_DISPLAY=1
	#if [[ $OFFICIAL_DISPLAY == "1" ]]; then
		if [[ $RPI_MODEL == "Raspberry Pi 3"* ]]; then
			if grep -q '^dtoverlay=vc4-kms-v3d\s*$' $CONFIG_TXT; then
				sed -i 's/^dtoverlay=vc4-kms-v3d\s*$/dtoverlay=vc4-fkms-v3d/' $CONFIG_TXT
				REBOOT_NEEDED=1
			fi
		fi
		if [[ $RPI_MODEL = "Raspberry Pi 5"* ]]; then
			if ! grep -q '^dtoverlay=vc4-kms-v3d,nohdmi\s*$' $CONFIG_TXT; then
		       		if grep -q '^dtoverlay=vc4-kms-v3d\s*$' $CONFIG_TXT; then
			       		sed -i 's/^dtoverlay=vc4-kms-v3d\s*$/dtoverlay=vc4-kms-v3d,nohdmi/' $CONFIG_TXT
		       		else
			       		echo "dtoverlay=vc4-kms-v3d,nohdmi" >> $CONFIG_TXT
		       		fi
				REBOOT_NEEDED=1
			fi
		fi
	fi


	MODE=$(whiptail --title "Mode" --notags --radiolist \
		"How do you want to run Race Capture?" 20 70 4 \
		FB "Direct Framebuffer" $(eval_setting $MODE "FB") \
		X11 "Using X11 (allows VNC)" $(eval_setting $MODE "X11" ) 3>&1 1>&2 2>&3)
	exitstatus=$?
	if [ $exitstatus != 0 ]; then
        	echo "Cancelling installation"
		exit 1
	fi

	if [[ $MODE == "X11" ]]; then
		if [[ $OFFICIAL_DISPLAY == "1" ]]; then
			RESOLUTION="800x480"
		fi
		CUSTOM_SELECTION="ON"
		res_values=("800x480" "1280x720" "1920x1080")
		for value in "${res_values[@]}"; do
			if [[ $RESOLUTION == $value ]]; then
				CUSTOM_SELECTION="OFF"
				break
			fi
		done

		RESOLUTION=$(whiptail --nocancel --title "Resolution" --radiolist \
			"Select or enter you screen resolution." 20 70 4 \
		 	"800x480" "Official Rpi Display" $(eval_setting $RESOLUTION "800x480") \
			"1280x720" "720p Display" $(eval_setting $RESOLUTION "1280x720") \
		        "1920x1080" "1080p Display" $(eval_setting $RESOLUTION "1920x1080") \
		        "Custom" "Custom display resolution" $CUSTOM_SELECTION 3>&1 1>&2 2>&3)	
		exitstatus=$?
		while ! [[ $RESOLUTION =~ ^[0-9]+x[0-9]+$ ]];
		do
			RESOLUTION=$(whiptail --title "Custom Resolution" --inputbox "Enter Custom input in the form <width>x<height>." 20 70 3>&1 1>&2 2>&3)
			exitstatus=$?
			if [ $exitstatus != 0 ]; then
			       	echo "Cancelling installation"
			       	exit 1
		       	fi
		done

			
		ENABLE_VNC=$(yesno "VNC" "Enable VNC?")
	fi

	if [[ $ENABLE_VNC == "1" ]]; then
		VNC_PASSWORD=$(password_prompt "VNC Password" "Please enter vnc password, leave blank for no password.")
	fi

	APP_SELECTIONS=$(whiptail --title "App Features" --notags --separate-output --checklist \
		"Choose app features to enable" 20 78 4 \
		WATCHDOG "Enable auto-restart watchdog" $(eval_setting $WATCHDOG 1) \
		CURSOR "Enable mouse pointer" $(eval_setting $CURSOR 1) \
		KEYBOARD "Enable touchscreen keyboard" $(eval_setting $TOUCH_KEYBOARD 1) 3>&1 1>&2 2>&3)
	exitstatus=$?
	if [ $exitstatus == 0 ]; then
		for i in $APP_SELECTIONS
		do
			case $i in
				WATCHDOG)
					ENABLE_WATCHDOG=1
					;;
				CURSOR)
					ENABLE_CURSOR=1
					;;
				KEYBOARD)
					ENABLE_TOUCH_KEYBOARD=1
					;;
				*)
					echo "Unknown selection!!!"
					exit 1
					;;
			esac
		done
	else
        	echo "Cancelling installation"
		exit 1
	fi


	SELECTIONS=$(whiptail --title "Extra Features" --notags --separate-output --checklist \
		"Choose features to enable" 20 78 4 \
		WIFI_AUTO_RECONNECT "Automatically reconnect wifi" $(eval_setting $WIFI_RECONNECT 1) \
		USB_AUTO_MOUNT "Mount usb drives under /media/usb#" $(eval_setting $USB_AUTOMOUNT 1) \
		GPIO_SHUTDOWN "Enable GPIO Pin21 shutdown/reboot" $(eval_setting $SHUTDOWN_BUTTON 1) \
		WAIT_FOR_NETWORK "Wait for network during boot" $(eval_setting $WAIT_FOR_NETWORK 1) 3>&1 1>&2 2>&3)
	exitstatus=$?
	if [ $exitstatus == 0 ]; then
		for i in $SELECTIONS
		do
			case $i in
				WIFI_AUTO_RECONNECT)
					ENABLE_WIFI_RECONNECT=1
					;;
				USB_AUTO_MOUNT)
					ENABLE_USB_AUTOMOUNT=1
					;;
				GPIO_SHUTDOWN)
					ENABLE_SHUTDOWN_BUTTON=1
					;;
				WAIT_FOR_NETWORK)
					ENABLE_WAIT_FOR_NETWORK=1
					;;
				*)
					echo "Uknown option"
					exit 1
					;;
			esac
		done
	else
		echo "Cancelling installation"
		exit 1
	fi

	setup_packages
	setup_user

	# Now that x11vnc is installed we can setup the vnc password, if necessary
	if [[ $ENABLE_VNC == "1" ]]; then
		VNC_CMD="x11vnc -display :0 -many -noxdamage"
		if [[ $VNC_PASSWORD != "" ]]; then
			mkdir -p /home/$USER/.vnc
			x11vnc -storepasswd "${VNC_PASSWORD}" /home/$USER/.vnc/passwd
			chown -R $USER:$USER /home/$USER/.vnc
			VNC_CMD+=" -usepw &"
	       	else
		       	VNC_CMD+=" -nopw &"
	       	fi
	else
	       	VNC_CMD=""
	fi


	if [[ $ENABLE_WIFI_RECONNECT == "1" ]]; then
	       	echo "Enabling Wifi auto-reconnect"
	       	# Setup wifi reconnect if not using dietpi which has it's own service
		cat > /etc/cron.d/wifi_reconnect.cron <<-'EOF'
		__WIFI_RECONNECT_CRON__
		EOF

		cat > /usr/local/bin/wifi_reconnect.sh <<-'EOF'
		__WIFI_RECONNECT__
		EOF

		chmod +x /usr/local/bin/wifi_reconnect.sh
       	fi

	if [[ $ENABLE_SHUTDOWN_BUTTON == "1" ]]; then
       		echo "Enabling GPIO shutdown button"
       		# Setup shutdown button support for GPIO21
	       	cat > /usr/local/bin/shutdown_button.py <<-'EOF'
		__SHUTDOWN_BUTTON_SCRIPT__
		EOF

		chmod +x /usr/local/bin/shutdown_button.py

		cat > /etc/systemd/system/shutdown_button.service <<-'EOF'
		__SHUTDOWN_BUTTON_SERVICE__
		EOF

		systemctl enable shutdown_button.service
	       	systemctl start shutdown_button.service
	fi


	if [[ $ENABLE_USB_AUTOMOUNT == "1" ]]; then
	       	echo "Enabling USB Automount"
	       	# Add automount rules
	       	cat > /usr/local/bin/automount <<-'EOF'
		__AUTOMOUNT__
		EOF
  
		chmod +x /usr/local/bin/automount

		cat > /etc/udev/rules.d/usbstick.rules <<-'EOF'
		__USBSTICK_RULES__
		EOF

		cat > /lib/systemd/system/usbstick-handler@.service <<-'EOF'
		__USBSTICK_SERVICE__
		EOF
	fi
	
	if [[ $ENABLE_WAIT_FOR_NETWORK == "1" ]]; then
		systemctl enable NetworkManager-wait-online
	else
		systemctl disable NetworkManager-wait-online
	fi

	install_rc_app

	RC_SCRIPT_ARGS="-- -c graphics:show_cursor:0"
	if [[ $MODE == "X11" ]]; then
		RC_SCRIPT_ARGS+=" --size=$RESOLUTION"
	else
		RC_SCRIPT_ARGS+=" -a"
	fi

	if [[ $ENABLE_WATCHDOG == "1" ]]; then
	       	RC_SCRIPT_ARGS="-w 1 ${RC_SCRIPT_ARGS}"
	fi
	
	# Enable cusor module if requested
	if [[ $ENABLE_CURSOR == "1" ]]; then
	       	RC_SCRIPT_ARGS+=" -m cursor"
	fi
	
	# Enable virtual keyboard if requeted
	if [[ $ENABLE_TOUCH_KEYBOARD == "1" ]]; then
	       	RC_SCRIPT_ARGS+=" -c kivy:keyboard_mode:systemandmulti"
	else
	       	RC_SCRIPT_ARGS+=" -c kivy:keyboard_mode:system"
	fi

	# Disable HDMI when an official display is connected to the RPI5
	if [[ $OFFICIAL_DISPLAY == "1" ]] && [[ $MODE == "X11" ]]; then
		RC_SCRIPT_ARGS+=" -c 'input:%(name)s:'"
	fi
	
	RC_LAUNCH_COMMAND="/opt/racecapture/run_racecapture_rpi.sh $RC_SCRIPT_ARGS"
	
	if [[ $MODE == "X11" ]]; then
	       	BASH_LAUNCH_CMD="xinit -- -nocursor -dpms -s 0"
	else
	       	BASH_LAUNCH_CMD="$RC_LAUNCH_COMMAND"
	fi
	
	cat > "/home/$USER/.bashrc" <<-EOF
	__BASH_RC__
	EOF
	chown $USER:$USER /home/$USER/.bashrc
	
	if [[ $MODE == "X11" ]]; then
		cat > "/home/$USER/.xinitrc" <<-EOF
		__XINIT_RC__
		EOF
		chown $USER:$USER /home/$USER/.xinitrc
	fi

	dump_settings
else
	install_rc_app
fi

echo "Installation complete!!"
if [[ $REBOOT_NEEDED == "1" ]]; then
	echo "A reboot is required for full changes to take effect, please reboot now!"
else
	echo "Upon next login the RaceCapture app should auto start, please logout and login!"
fi
