#!/bin/bash -e

RC_APP_URL=`curl -s https://podium.live/software | grep -Po '(?<=<a href=")[^"]*racecapture_linux_raspberrypi[^"]*.bz2'`
RC_APP_FILENAME=`basename $RC_APP_URL`

if [ "$EUID" -ne 0 ] 
then 
	echo "Must be run as root"
       	exit
fi

if [ -d /boot/dietpi ]
then
       	USER=dietpi
	# Make dietpi not wait on network during boot sequence
	sed -i 's/Type=oneshot/Type=simple/' /etc/systemd/system/ifup@.service.d/dietpi.conf
        . /boot/rcdash_settings.txt
else
	if [ -z "$SUDO_USER" ]
	then
		echo "Must be run via sudo"
		exit
	fi

	USER=$SUDO_USER
	sed -i '1 s/$/ logo.nologo consoleblank=0/' /boot/cmdline.txt
	echo "disable-spash=1" >> /boot/config.txt
	echo "gpu_mem=256" >> /boot/config.txt
	SELECTIONS=$(whiptail --title "Features" --checklist \
		"Choose features to enable" 20 78 4 \
		WIFI_AUTO_RECONNECT "Automatically reconnect wifi" ON \
		USB_AUTO_MOUNT "Mount usb drives under /media/usb#" ON \
		GPIO_SHUTDOWN "Enable GPIO Pin21 shutdown/reboot" OFF 3>&1 1>&2 2>&3)
	exitstatus=$?
	if [ $exitstatus == 0 ]; then
	  for i in $SELECTIONS
	  do
		 case $i in
			 \"WIFI_AUTO_RECONNECT\")
				 ENABLE_WIFI_RECONNECT=1
				 ;;
			 \"USB_AUTO_MOUNT\")
				 ENABLE_USB_AUTOMOUNT=1
				 ;;
			 \"GPIO_SHUTDOWN\")
				 ENABLE_SHUTDOWN_BUTTON=1
				 ;;
			 *)
				 echo "Uknown option"
				 exit 1
				 ;;
		 esac
	 done
        else
	        echo "Cancelling installation"
		exit 1
	fi
fi

# Install the necessary dependencies for the RC App
echo "Installing necessary packages"
apt-get -y install mesa-utils libgles2 libegl1-mesa libegl-mesa0 mtdev-tools pmount python3-gpiozero ratpoison xserver-xorg xserver-xorg-legacy xinit

# Groups needed for the dietpi user to access opengl, input (touch/mouse) and usb serial ports
echo "Adding user to necessary groups"
adduser $USER render
adduser $USER video
adduser $USER input
adduser $USER dialout

# No .config directory can cause RC App to fail
mkdir -p /home/$USER/.config/racecapture
chown $USER:$USER /home/$USER/.config/racecapture

if [ "$ENABLE_WIFI_RECONNECT" == "1" ]
then
  echo "Enabling Wifi auto-reconnect"
  # Setup wifi reconnect if not using dietpi which has it's own service
  if [ "$USER" != "dietpi" ]
  then
    cat > /etc/cron.d/wifi_reconnect.cron <<'EOF'
__WIFI_RECONNECT_CRON__
EOF

    cat > /usr/local/bin/wifi_reconnect.sh <<'EOF'
__WIFI_RECONNECT__
EOF

    chmod +x /usr/local/bin/wifi_reconnect.sh
  else
    systemctl enable dietpi-wifi-monitor.service
    systemctl start dietpi-wifi-monitor.service
  fi
fi

if [ "$ENABLE_SHUTDOWN_BUTTON" == "1" ]
then
  echo "Enabling GPIO shutdown button"
  # Setup shutdown button support for GPIO21
  cat > /usr/local/bin/shutdown_button.py <<'EOF'
__SHUTDOWN_BUTTON_SCRIPT__
EOF

  chmod +x /usr/local/bin/shutdown_button.py

  cat > /etc/systemd/system/shutdown_button.service <<'EOF'
__SHUTDOWN_BUTTON_SERVICE__
EOF

  systemctl enable shutdown_button.service
  systemctl start shutdown_button.service
fi


if [ "$ENABLE_USB_AUTOMOUNT" == "1" ]
then
  echo "Enabling USB Automount"
  # Add automount rules
  cat > /usr/local/bin/automount <<'EOF'
__AUTOMOUNT__
EOF
  
  chmod +x /usr/local/bin/automount

  cat > /etc/udev/rules.d/usbstick.rules <<'EOF'
__USBSTICK_RULES__
EOF

  cat > /lib/systemd/system/usbstick-handler@.service <<'EOF'
__USBSTICK_SERVICE__
EOF
fi

# Download and install the RC App
echo "Installing RC App '$RC_APP_FILENAME'"
cd /opt
if [ -f "$RC_APP_FILENAME" ]; then
  echo "RC App '$RC_APP_FILENAME' already downloaded"
else
  echo "Downloading..."
  wget -q "$RC_APP_URL"
fi

if [ -d "racecapture" ]; then
    if (whiptail --title "Overwrite Installation" --yesno "Overwrite the existing racecapture installation." 8 78); then
        echo "Removing old installation"
	rm -rf racecapture
        echo "Extracting '$RC_APP_FILENAME'"
        tar xjf "$RC_APP_FILENAME"
    else
        echo "Skipping"
    fi
else
    echo "Extracting '$RC_APP_FILENAME'"
    tar xjf "$RC_APP_FILENAME"
fi
# Remove conflicting libstdc++
#mv /opt/racecapture/libstdc++.so.6 /opt/racecapture/libstdc++.so.6.bak

cat > "/home/$USER/.bashrc" <<'EOF'
__BASH_RC__
EOF
chown $USER:$USER /home/$USER/.bashrc

cat > "/home/$USER/.ratpoisonrc" <<'EOF'
__RATPOISON_RC__
EOF
chown $USER:$USER /home/$USER/.ratpoisonrc

cat > "/home/$USER/.xinitrc" <<'EOF'
__XINIT_RC__
EOF
chown $USER:$USER /home/$USER/.xinitrc
